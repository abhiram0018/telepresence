#!/usr/bin/env bash
{
	if [[ $# != 2 ]]; then
		echo >&2 "$0: expected 2 arguments, got $#: $*"
		echo >&2 "Usage: $0 SETTYPE VALPKG.VALTYPE"
		exit 2
	fi
	SETTYPE=$1
	rawVALTYPE=$2

	# Split rawVALTYPE in to the package name and trimmed typename.
	VALPKG=${rawVALTYPE%.*}
	VALTYPE=${rawVALTYPE##*/}
	VALCTOR=$VALTYPE
	# Handle a leading '*' for pointer types.
	if [[ "$rawVALTYPE" = '*'* ]]; then
		VALPKG=${VALPKG#'*'}
		VALCTOR="\\&${VALTYPE}"
		VALTYPE="*${VALTYPE}"
	fi

	sed -E \
	    -e 's,.*\+build ignore.*,// Code generated by "go generate". DO NOT EDIT.,' \
	    -e "s,SETTYPE,${SETTYPE},g" \
	    -e "s,VALTYPE,${VALTYPE},g" \
	    -e "s,VALPKG,${VALPKG},g" \
	    < generic.tmpl.go > "generated_${SETTYPE,,}.go"

	# sed -E \
	#     -e 's,.*\+build ignore.*,// Code generated by "go generate". DO NOT EDIT.,' \
	#     -e "s,SETTYPE,${SETTYPE},g" \
	#     -e "s,VALTYPE,${VALTYPE},g" \
	#     -e "s,VALCTOR,${VALCTOR},g" \
	#     -e "s,VALPKG,${VALPKG},g" \
	#     -e "s,TESTFIELD,${TESTFIELD},g" \
	#     < generic_test.tmpl.go | gofmt > "generated_${SETTYPE,,}_test.go"
}
